/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game-management/audio-manager.js":
/*!**********************************************!*\
  !*** ./src/game-management/audio-manager.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _tracks = /*#__PURE__*/new WeakMap();\n\nclass AudioManager {\n  constructor() {\n    _tracks.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _tracks, []);\n  }\n\n  load(key, path, volume = 0.5, loop = false) {\n    _classPrivateFieldGet(this, _tracks)[key] = new Audio(path);\n    _classPrivateFieldGet(this, _tracks)[key].volume = volume;\n    _classPrivateFieldGet(this, _tracks)[key].loop = loop;\n  }\n\n  play(key) {\n    _classPrivateFieldGet(this, _tracks)[key].currentTime = 0;\n\n    _classPrivateFieldGet(this, _tracks)[key].play();\n  }\n\n  stop(key) {\n    _classPrivateFieldGet(this, _tracks)[key].currentTime = 0;\n\n    _classPrivateFieldGet(this, _tracks)[key].pause();\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AudioManager);\n\n//# sourceURL=webpack://snake/./src/game-management/audio-manager.js?");

/***/ }),

/***/ "./src/game-management/game-manager.js":
/*!*********************************************!*\
  !*** ./src/game-management/game-manager.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/direction */ \"./src/helpers/direction.js\");\n/* harmony import */ var _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/event-dispatcher */ \"./src/helpers/event-dispatcher.js\");\n/* harmony import */ var _snake__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../snake */ \"./src/snake.js\");\n/* harmony import */ var _structures_grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../structures/grid */ \"./src/structures/grid.js\");\n/* harmony import */ var _helpers_timer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/timer */ \"./src/helpers/timer.js\");\n/* harmony import */ var _structures_vector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../structures/vector */ \"./src/structures/vector.js\");\n/* harmony import */ var _input_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./input-manager */ \"./src/game-management/input-manager.js\");\n/* harmony import */ var _audio_manager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./audio-manager */ \"./src/game-management/audio-manager.js\");\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\n\n\n\n\n\n\n\nvar _score = /*#__PURE__*/new WeakMap();\n\nvar _snake = /*#__PURE__*/new WeakMap();\n\nvar _initialSnakeLength = /*#__PURE__*/new WeakMap();\n\nvar _grid = /*#__PURE__*/new WeakMap();\n\nvar _applePosition = /*#__PURE__*/new WeakMap();\n\nvar _eventDispatcher = /*#__PURE__*/new WeakMap();\n\nvar _events = /*#__PURE__*/new WeakMap();\n\nvar _timer = /*#__PURE__*/new WeakMap();\n\nvar _gameInProgess = /*#__PURE__*/new WeakMap();\n\nvar _moveDelay = /*#__PURE__*/new WeakMap();\n\nvar _currentSnakePositions = /*#__PURE__*/new WeakMap();\n\nvar _audioManager = /*#__PURE__*/new WeakMap();\n\nvar _inputManager = /*#__PURE__*/new WeakMap();\n\nvar _update = /*#__PURE__*/new WeakSet();\n\nvar _isWithinGrid = /*#__PURE__*/new WeakSet();\n\nclass GameManager {\n  constructor() {\n    _isWithinGrid.add(this);\n\n    _update.add(this);\n\n    _score.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _snake.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _initialSnakeLength.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _grid.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _applePosition.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _eventDispatcher.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _events.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _timer.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _gameInProgess.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _moveDelay.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _currentSnakePositions.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _audioManager.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _inputManager.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _initialSnakeLength, 6);\n\n    _classPrivateFieldSet(this, _grid, new _structures_grid__WEBPACK_IMPORTED_MODULE_3__.default(20, 20));\n\n    _classPrivateFieldSet(this, _snake, new _snake__WEBPACK_IMPORTED_MODULE_2__.default(_classPrivateFieldGet(this, _grid).getCenter(), _classPrivateFieldGet(this, _initialSnakeLength), _helpers_direction__WEBPACK_IMPORTED_MODULE_0__.default.UP));\n\n    _classPrivateFieldSet(this, _timer, new _helpers_timer__WEBPACK_IMPORTED_MODULE_4__.default());\n\n    _classPrivateFieldSet(this, _eventDispatcher, new _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_1__.default());\n\n    _classPrivateFieldSet(this, _gameInProgess, false);\n\n    _classPrivateFieldSet(this, _moveDelay, 150);\n\n    _classPrivateFieldSet(this, _currentSnakePositions, []);\n\n    _classPrivateFieldSet(this, _audioManager, new _audio_manager__WEBPACK_IMPORTED_MODULE_7__.default());\n\n    _classPrivateFieldSet(this, _events, {\n      INIT: 'INIT',\n      START: 'START',\n      END: 'END',\n      PAUSE: 'PAUSE',\n      RESET: 'RESET',\n      UPDATE: 'UPDATE',\n      TICK: 'TICK'\n    });\n\n    Object.freeze(_classPrivateFieldGet(this, _events));\n\n    _classPrivateFieldSet(this, _inputManager, new _input_manager__WEBPACK_IMPORTED_MODULE_6__.default());\n\n    _classPrivateFieldGet(this, _inputManager).onUp(() => _classPrivateFieldGet(this, _snake).changeDirection(_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.default.UP));\n\n    _classPrivateFieldGet(this, _inputManager).onRight(() => _classPrivateFieldGet(this, _snake).changeDirection(_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.default.RIGHT));\n\n    _classPrivateFieldGet(this, _inputManager).onDown(() => _classPrivateFieldGet(this, _snake).changeDirection(_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.default.DOWN));\n\n    _classPrivateFieldGet(this, _inputManager).onLeft(() => _classPrivateFieldGet(this, _snake).changeDirection(_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.default.LEFT));\n\n    _classPrivateFieldGet(this, _audioManager).load('eat', '../audio/eat.wav', 0.8);\n\n    _classPrivateFieldGet(this, _audioManager).load('up', '../audio/wo.wav');\n\n    _classPrivateFieldGet(this, _audioManager).load('right', '../audio/we.wav');\n\n    _classPrivateFieldGet(this, _audioManager).load('down', '../audio/wa.wav');\n\n    _classPrivateFieldGet(this, _audioManager).load('left', '../audio/wu.wav');\n\n    _classPrivateFieldGet(this, _audioManager).load('bg', '../audio/Monkeys-Spinning-Monkeys.mp3', 0.3, true);\n\n    _classPrivateFieldGet(this, _audioManager).load('cheering', '../audio/cheering.wav', 0.3, false);\n  }\n  /* Public methods */\n\n\n  init() {\n    _classPrivateFieldSet(this, _gameInProgess, false);\n\n    _classPrivateFieldGet(this, _timer).stop();\n\n    _classPrivateFieldGet(this, _timer).clearHandlers();\n\n    ;\n\n    _classPrivateFieldGet(this, _timer).onElapsed(_classPrivateMethodGet(this, _update, _update2).bind(this));\n\n    _classPrivateFieldSet(this, _score, 0);\n\n    _classPrivateFieldSet(this, _applePosition, _classPrivateFieldGet(this, _grid).getRandomCoordinate(_classPrivateFieldGet(this, _snake).getPositions()));\n\n    _classPrivateFieldGet(this, _snake).init();\n\n    _classPrivateFieldGet(this, _audioManager).play('bg');\n\n    _classPrivateFieldGet(this, _timer).onTick(() => {\n      _classPrivateFieldGet(this, _inputManager).update();\n    });\n\n    const onEatHandler = snakeLength => {\n      _classPrivateFieldSet(this, _score, snakeLength - _classPrivateFieldGet(this, _initialSnakeLength));\n\n      _classPrivateFieldGet(this, _audioManager).play('eat');\n    };\n\n    const onChangeDirectionHandler = direction => {\n      _classPrivateFieldGet(this, _audioManager).play(direction.toString().toLowerCase());\n    };\n\n    _classPrivateFieldGet(this, _snake).removeOnEat(onEatHandler);\n\n    _classPrivateFieldGet(this, _snake).onEat(onEatHandler);\n\n    _classPrivateFieldGet(this, _snake).removeOnChangeDirection(onChangeDirectionHandler);\n\n    _classPrivateFieldGet(this, _snake).onChangeDirection(onChangeDirectionHandler);\n\n    _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).UPDATE, {\n      currentSnakeDirection: _classPrivateFieldGet(this, _snake).getDirection(),\n      currentSnakePositions: _classPrivateFieldGet(this, _snake).getPositions(),\n      snakeLength: _classPrivateFieldGet(this, _snake).getLength(),\n      bulges: _classPrivateFieldGet(this, _snake).getBulges(),\n      applePosition: _classPrivateFieldGet(this, _applePosition),\n      score: _classPrivateFieldGet(this, _score)\n    });\n  }\n\n  start() {\n    _classPrivateFieldSet(this, _gameInProgess, true);\n\n    _classPrivateFieldGet(this, _timer).start(_classPrivateFieldGet(this, _moveDelay));\n  }\n\n  end(positions, direction) {\n    _classPrivateFieldGet(this, _timer).stop();\n\n    _classPrivateFieldGet(this, _timer).removeOnElapsed(_classPrivateMethodGet(this, _update, _update2));\n\n    _classPrivateFieldGet(this, _snake).resetHandlers();\n\n    _classPrivateFieldGet(this, _audioManager).stop('bg');\n\n    _classPrivateFieldGet(this, _audioManager).play('cheering');\n\n    _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).END, {\n      currentSnakeDirection: direction,\n      currentSnakePositions: positions,\n      snakeLength: _classPrivateFieldGet(this, _snake).getLength(),\n      bulges: _classPrivateFieldGet(this, _snake).getBulges(),\n      applePosition: _classPrivateFieldGet(this, _applePosition),\n      score: _classPrivateFieldGet(this, _score),\n      grid: _classPrivateFieldGet(this, _grid)\n    });\n  }\n  /* Private Methods */\n\n\n  /* Events */\n  onUpdate(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).UPDATE, handler);\n  }\n\n  removeOnUpdate(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).UPDATE, handler);\n  }\n\n  onInit(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).INIT, handler);\n  }\n\n  removeOnInit(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).INIT, handler);\n  }\n\n  onEnd(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).END, handler);\n  }\n\n  removeOnEnd(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).END, handler);\n  }\n\n}\n\nfunction _update2() {\n  _classPrivateFieldGet(this, _inputManager).update();\n\n  if (_classPrivateFieldGet(this, _gameInProgess)) {\n    const previousPositions = _classPrivateFieldGet(this, _currentSnakePositions);\n\n    const previousDirection = _classPrivateFieldGet(this, _snake).getDirection();\n\n    ;\n\n    _classPrivateFieldGet(this, _snake).move();\n\n    let headPosition = _classPrivateFieldGet(this, _snake).getHeadPosition(); //running into itself or the outer walls will end the game\n\n\n    if (_classPrivateFieldGet(this, _snake).hasOverlapped() || !_classPrivateMethodGet(this, _isWithinGrid, _isWithinGrid2).call(this, _classPrivateFieldGet(this, _snake), _classPrivateFieldGet(this, _grid))) {\n      _classPrivateFieldSet(this, _gameInProgess, false);\n\n      this.end(previousPositions, previousDirection);\n    } else {\n      //check for apple - grow\n      if (_structures_vector__WEBPACK_IMPORTED_MODULE_5__.default.isEqual(headPosition, _classPrivateFieldGet(this, _applePosition))) {\n        _classPrivateFieldGet(this, _snake).eat();\n\n        _classPrivateFieldSet(this, _applePosition, _classPrivateFieldGet(this, _grid).getRandomCoordinate(_classPrivateFieldGet(this, _snake).getPositions())); //no pop - therefor growth\n\n      } else {\n        _classPrivateFieldGet(this, _snake).pop(); // remove the tail to simulate moving\n\n      }\n\n      _classPrivateFieldSet(this, _currentSnakePositions, _classPrivateFieldGet(this, _snake).getPositions());\n\n      _classPrivateFieldSet(this, _score, _classPrivateFieldGet(this, _snake).getLength() - _classPrivateFieldGet(this, _initialSnakeLength));\n\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).UPDATE, {\n        currentSnakeDirection: _classPrivateFieldGet(this, _snake).getDirection(),\n        currentSnakePositions: _classPrivateFieldGet(this, _snake).getPositions(),\n        snakeLength: _classPrivateFieldGet(this, _snake).getLength(),\n        bulges: _classPrivateFieldGet(this, _snake).getBulges(),\n        applePosition: _classPrivateFieldGet(this, _applePosition),\n        score: _classPrivateFieldGet(this, _score)\n      });\n    }\n  }\n}\n\nfunction _isWithinGrid2(snake, grid) {\n  let headPosition = snake.getHeadPosition();\n  return headPosition.y >= 0 && headPosition.y < grid.getRowCount() && headPosition.x >= 0 && headPosition.x < grid.getColumnCount();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameManager);\n\n//# sourceURL=webpack://snake/./src/game-management/game-manager.js?");

/***/ }),

/***/ "./src/game-management/highscore-manager.js":
/*!**************************************************!*\
  !*** ./src/game-management/highscore-manager.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _key = /*#__PURE__*/new WeakMap();\n\nvar _highScores = /*#__PURE__*/new WeakMap();\n\nvar _save = /*#__PURE__*/new WeakSet();\n\nvar _compare = /*#__PURE__*/new WeakSet();\n\nclass HighScoreManager {\n  constructor(key) {\n    _compare.add(this);\n\n    _save.add(this);\n\n    _key.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _highScores.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _key, key);\n\n    _classPrivateFieldSet(this, _highScores, []);\n\n    let savedHighScoresString = window.localStorage.getItem(key);\n\n    if (typeof savedHighScoresString === 'string') {\n      let savedHighScores = JSON.parse(savedHighScoresString);\n\n      if (Array.isArray(savedHighScores)) {\n        _classPrivateFieldSet(this, _highScores, [...savedHighScores]);\n      }\n    }\n  }\n\n  getHighScores() {\n    return _classPrivateFieldGet(this, _highScores);\n  }\n\n  addHighScore(name, value) {\n    _classPrivateFieldGet(this, _highScores).push({\n      name,\n      value,\n      date: new Date().toISOString()\n    });\n\n    _classPrivateMethodGet(this, _save, _save2).call(this);\n  }\n\n  getTopTen() {\n    return _classPrivateFieldGet(this, _highScores).sort(_classPrivateMethodGet(this, _compare, _compare2)).filter((element, index) => index < 10);\n  }\n\n}\n\nfunction _save2() {\n  window.localStorage.setItem(_classPrivateFieldGet(this, _key), JSON.stringify(_classPrivateFieldGet(this, _highScores)));\n}\n\nfunction _compare2(a, b) {\n  if (a.value > b.value) return -1;\n  if (b.value > a.value) return 1;\n  if (Date.parse(a.date) > Date.parse(b.date)) return 1;\n  if (Date.parse(b.date) > Date.parse(a.date)) return -1;\n  return 0;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HighScoreManager);\n\n//# sourceURL=webpack://snake/./src/game-management/highscore-manager.js?");

/***/ }),

/***/ "./src/game-management/input-manager.js":
/*!**********************************************!*\
  !*** ./src/game-management/input-manager.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/event-dispatcher */ \"./src/helpers/event-dispatcher.js\");\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\nvar _eventDispatcher = /*#__PURE__*/new WeakMap();\n\nvar _events = /*#__PURE__*/new WeakMap();\n\nvar _keyState = /*#__PURE__*/new WeakMap();\n\nvar _keys = /*#__PURE__*/new WeakMap();\n\nclass InputManager {\n  constructor() {\n    _eventDispatcher.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _events.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _keyState.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _keys.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _eventDispatcher, new _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__.default());\n\n    _classPrivateFieldSet(this, _events, {\n      UP: 'UP',\n      RIGHT: 'RIGHT',\n      DOWN: 'DOWN',\n      LEFT: 'LEFT',\n      E: 'E',\n      ANY: 'ANY'\n    });\n\n    _classPrivateFieldSet(this, _keyState, []);\n\n    _classPrivateFieldSet(this, _keys, {\n      KEY_UP: 38,\n      KEY_DOWN: 40,\n      KEY_LEFT: 37,\n      KEY_RIGHT: 39\n    });\n\n    const keyEventLogger = e => {\n      _classPrivateFieldGet(this, _keyState)[e.keyCode] = e.type == 'keydown';\n\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).ANY);\n    };\n\n    window.addEventListener(\"keydown\", keyEventLogger);\n    window.addEventListener(\"keyup\", keyEventLogger);\n  }\n\n  update() {\n    if (_classPrivateFieldGet(this, _keyState)[_classPrivateFieldGet(this, _keys).KEY_LEFT]) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).LEFT);\n    }\n\n    if (_classPrivateFieldGet(this, _keyState)[_classPrivateFieldGet(this, _keys).KEY_UP]) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).UP);\n    }\n\n    if (_classPrivateFieldGet(this, _keyState)[_classPrivateFieldGet(this, _keys).KEY_RIGHT]) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).RIGHT);\n    }\n\n    if (_classPrivateFieldGet(this, _keyState)[_classPrivateFieldGet(this, _keys).KEY_DOWN]) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).DOWN);\n    }\n  }\n\n  onUp(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).UP, handler);\n  }\n\n  removeOnUp(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).UP, handler);\n  }\n\n  onRight(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).RIGHT, handler);\n  }\n\n  removeOnRight(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).RIGHT, handler);\n  }\n\n  onDown(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).DOWN, handler);\n  }\n\n  removeOnDown(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).DOWN, handler);\n  }\n\n  onLeft(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).LEFT, handler);\n  }\n\n  removeOnLeft(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).LEFT, handler);\n  }\n\n  onAnyKey(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).ANY, handler);\n  }\n\n  removeOnAnyKey(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).ANY, handler);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InputManager);\n\n//# sourceURL=webpack://snake/./src/game-management/input-manager.js?");

/***/ }),

/***/ "./src/helpers/direction.js":
/*!**********************************!*\
  !*** ./src/helpers/direction.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"directionAsVector\": () => (/* binding */ directionAsVector),\n/* harmony export */   \"getDirectionOpposite\": () => (/* binding */ getDirectionOpposite),\n/* harmony export */   \"isDirection\": () => (/* binding */ isDirection),\n/* harmony export */   \"solveDirection\": () => (/* binding */ solveDirection),\n/* harmony export */   \"solveBodyDirection\": () => (/* binding */ solveBodyDirection),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _structures_vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures/vector */ \"./src/structures/vector.js\");\n\nconst directions = {\n  NONE: \"NONE\",\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n  LEFTDOWN: \"LEFTDOWN\",\n  LEFTUP: \"LEFTUP\",\n  RIGHTDOWN: \"RIGHTDOWN\",\n  RIGHTUP: \"RIGHTUP\"\n};\nObject.freeze(directions);\n\nconst getDirectionOpposite = direction => {\n  switch (direction) {\n    case directions.UP:\n      return directions.DOWN;\n\n    case directions.RIGHT:\n      return directions.LEFT;\n\n    case directions.DOWN:\n      return directions.UP;\n\n    case directions.LEFT:\n      return directions.RIGHT;\n  }\n};\n\nconst solveDirection = (positionA, positionB) => {\n  let direction = directions.UP;\n\n  if (positionA.x === positionB.x && positionA.y < positionB.y) {\n    direction = directions.UP;\n  } else if (positionA.x > positionB.x && positionA.y === positionB.y) {\n    direction = directions.RIGHT;\n  } else if (positionA.x < positionB.x && positionA.y === positionB.y) {\n    direction = directions.LEFT;\n  } else if (positionA.x === positionB.x && positionA.y > positionB.y) {\n    direction = directions.DOWN;\n  }\n\n  return direction;\n};\n\nconst solveBodyDirection = (positionA, positionB, positionC) => {\n  let direction = directions.NONE;\n\n  if (positionA.y < positionB.y && positionB.y < positionC.y) {\n    direction = directions.UP;\n  } else if (positionA.x > positionB.x && positionB.x > positionC.x) {\n    direction = directions.RIGHT;\n  } else if (positionA.x > positionB.x && positionB.y < positionC.y) {\n    direction = directions.RIGHTDOWN;\n  } else if (positionA.y > positionB.y && positionB.x < positionC.x) {\n    direction = directions.RIGHTDOWN;\n  } else if (positionA.x > positionB.x && positionB.y > positionC.y) {\n    direction = directions.RIGHTUP;\n  } else if (positionA.y < positionB.y && positionB.x < positionC.x) {\n    direction = directions.RIGHTUP;\n  } else if (positionA.x < positionB.x && positionB.x < positionC.x) {\n    direction = directions.LEFT;\n  } else if (positionA.x < positionB.x && positionB.y > positionC.y) {\n    direction = directions.LEFTUP;\n  } else if (positionA.y < positionB.y && positionB.x > positionC.x) {\n    direction = directions.LEFTUP;\n  } else if (positionA.x < positionB.x && positionB.y < positionC.y) {\n    direction = directions.LEFTDOWN;\n  } else if (positionA.y > positionB.y && positionB.x > positionC.x) {\n    direction = directions.LEFTDOWN;\n  } else if (positionA.y > positionB.y && positionB.y > positionC.y) {\n    direction = directions.DOWN;\n  }\n\n  return direction;\n};\n\nconst directionAsVector = direction => {\n  switch (direction) {\n    case directions.UP:\n      return new _structures_vector__WEBPACK_IMPORTED_MODULE_0__.default(0, -1);\n\n    case directions.RIGHT:\n      return new _structures_vector__WEBPACK_IMPORTED_MODULE_0__.default(1, 0);\n\n    case directions.DOWN:\n      return new _structures_vector__WEBPACK_IMPORTED_MODULE_0__.default(0, 1);\n\n    case directions.LEFT:\n      return new _structures_vector__WEBPACK_IMPORTED_MODULE_0__.default(-1, 0);\n  }\n};\n\nconst isDirection = direction => {\n  return Object.keys(directions).includes(direction);\n};\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (directions);\n\n//# sourceURL=webpack://snake/./src/helpers/direction.js?");

/***/ }),

/***/ "./src/helpers/event-dispatcher.js":
/*!*****************************************!*\
  !*** ./src/helpers/event-dispatcher.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n\nclass EventDispatcher {\n  constructor() {\n    this._events = [];\n  }\n\n  addEvent(eventName) {\n    if (typeof this._events[eventName] === 'undefined') {\n      this._events[eventName] = [];\n    }\n  }\n\n  clearEvent(eventName) {\n    this._events[eventName] = [];\n  }\n\n  reset() {\n    this._events = [];\n  }\n\n  registerHandler(eventName, handler) {\n    this.addEvent(eventName);\n\n    this._events[eventName].push(handler);\n  }\n\n  deregisterHandler(eventName, handler) {\n    if (!Object.keys(this._events).includes(eventName)) {\n      return;\n    }\n\n    let index = this._events[eventName].indexOf(handler);\n\n    if (index !== -1) {\n      this._events[eventName].splice(index, 1);\n    }\n  }\n\n  dispatch(eventName, arg) {\n    if (typeof this._events[eventName] !== \"undefined\") {\n      for (let index = 0; index < this._events[eventName].length; index++) {\n        this._events[eventName][index](arg);\n      }\n    }\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventDispatcher);\n\n//# sourceURL=webpack://snake/./src/helpers/event-dispatcher.js?");

/***/ }),

/***/ "./src/helpers/spritesheet.js":
/*!************************************!*\
  !*** ./src/helpers/spritesheet.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nvar _spriteSheet = /*#__PURE__*/new WeakMap();\n\nvar _sprites = /*#__PURE__*/new WeakMap();\n\nclass SpriteSheet {\n  // #spriteSheetLoaded;\n  constructor(imagePath) {\n    _spriteSheet.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _sprites.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _spriteSheet, document.createElement('img')); //this.#spriteSheetLoaded = false;\n    // this.#spriteSheet.addEventListener('load', () => {\n    //     this.#spriteSheetLoaded = true;\n    // });\n\n\n    _classPrivateFieldGet(this, _spriteSheet).src = imagePath;\n\n    _classPrivateFieldSet(this, _sprites, {});\n  }\n\n  addSprite(key, x, y, width, height) {\n    _classPrivateFieldGet(this, _sprites)[key] = {\n      spriteSheet: _classPrivateFieldGet(this, _spriteSheet),\n      x,\n      y,\n      width,\n      height\n    };\n  }\n\n  getSprite(key) {\n    return _classPrivateFieldGet(this, _sprites)[key];\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SpriteSheet);\n\n//# sourceURL=webpack://snake/./src/helpers/spritesheet.js?");

/***/ }),

/***/ "./src/helpers/timer.js":
/*!******************************!*\
  !*** ./src/helpers/timer.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _event_dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-dispatcher */ \"./src/helpers/event-dispatcher.js\");\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\nvar _elaspsed = /*#__PURE__*/new WeakMap();\n\nvar _startTime = /*#__PURE__*/new WeakMap();\n\nvar _current = /*#__PURE__*/new WeakMap();\n\nvar _target = /*#__PURE__*/new WeakMap();\n\nvar _isActive = /*#__PURE__*/new WeakMap();\n\nvar _eventDispatcher = /*#__PURE__*/new WeakMap();\n\nvar _events = /*#__PURE__*/new WeakMap();\n\nvar _timerLoop = /*#__PURE__*/new WeakSet();\n\nclass Timer {\n  constructor() {\n    _timerLoop.add(this);\n\n    _elaspsed.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _startTime.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _current.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _target.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _isActive.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _eventDispatcher.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _events.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _eventDispatcher, new _event_dispatcher__WEBPACK_IMPORTED_MODULE_0__.default());\n\n    _classPrivateFieldSet(this, _events, {\n      TICK: \"TICK\",\n      ELAPSED: \"ELAPSED\"\n    });\n  }\n\n  start(target) {\n    _classPrivateFieldSet(this, _current, 0);\n\n    _classPrivateFieldSet(this, _startTime, performance.now());\n\n    _classPrivateFieldSet(this, _target, target);\n\n    _classPrivateFieldSet(this, _isActive, true);\n\n    window.requestAnimationFrame(_classPrivateMethodGet(this, _timerLoop, _timerLoop2).bind(this));\n  }\n\n  reset() {\n    _classPrivateFieldSet(this, _current, 0);\n\n    _classPrivateFieldSet(this, _startTime, performance.now());\n  }\n\n  stop() {\n    _classPrivateFieldSet(this, _isActive, false);\n  }\n\n  hasElapsed() {\n    return _classPrivateFieldGet(this, _elaspsed);\n  }\n\n  tick() {\n    if (_classPrivateFieldGet(this, _isActive)) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).TICK, _classPrivateFieldGet(this, _current) / _classPrivateFieldGet(this, _target));\n\n      _classPrivateFieldSet(this, _current, performance.now() - _classPrivateFieldGet(this, _startTime));\n\n      _classPrivateFieldSet(this, _elaspsed, _classPrivateFieldGet(this, _current) > _classPrivateFieldGet(this, _target));\n\n      if (this.hasElapsed()) {\n        _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).ELAPSED);\n\n        this.reset();\n      }\n    }\n  }\n\n  clearHandlers() {\n    _classPrivateFieldGet(this, _eventDispatcher).reset();\n  }\n\n  onTick(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).TICK, handler);\n  }\n\n  removeOnTick(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).TICK, handler);\n  }\n\n  onElapsed(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).ELAPSED, handler);\n  }\n\n  removeOnElapsed(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).ELAPSED, handler);\n  }\n\n}\n\nfunction _timerLoop2() {\n  this.tick();\n\n  if (_classPrivateFieldGet(this, _isActive)) {\n    setTimeout(_classPrivateMethodGet(this, _timerLoop, _timerLoop2).bind(this), 0);\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Timer);\n\n//# sourceURL=webpack://snake/./src/helpers/timer.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _renderers_canvas_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderers/canvas-renderer */ \"./src/renderers/canvas-renderer.js\");\n/* harmony import */ var _game_management_game_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game-management/game-manager */ \"./src/game-management/game-manager.js\");\n/* harmony import */ var _ui_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/ui */ \"./src/ui/ui.js\");\n/* harmony import */ var _game_management_audio_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game-management/audio-manager */ \"./src/game-management/audio-manager.js\");\n/* harmony import */ var _structures_vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structures/vector */ \"./src/structures/vector.js\");\n\n\n\n\n\nconst canvas = document.getElementById('canvas');\nconst renderer = new _renderers_canvas_renderer__WEBPACK_IMPORTED_MODULE_0__.default(canvas);\nconst introScreen = document.getElementById('intro-screen');\nconst gameScreen = document.getElementById('game-screen');\nconst highScoreScreen = document.getElementById('high-score-screen');\nconst reviewScreen = document.getElementById('review-screen');\nconst gameManager = new _game_management_game_manager__WEBPACK_IMPORTED_MODULE_1__.default();\nconst audioManager = new _game_management_audio_manager__WEBPACK_IMPORTED_MODULE_3__.default();\naudioManager.load('menu-bg', './audio/Komiku_-_12_-_Bicycle.mp3', 0.5, true);\nconst ui = new _ui_ui__WEBPACK_IMPORTED_MODULE_2__.default(introScreen, gameScreen, highScoreScreen, reviewScreen);\nui.onMainMenu(() => {\n  audioManager.play('menu-bg');\n});\nui.onInitGame(() => {\n  audioManager.stop('menu-bg');\n  gameManager.init();\n});\nui.onStartGame(() => {\n  gameManager.start();\n});\n\nconst updateGame = ({\n  currentSnakePositions,\n  currentSnakeDirection,\n  snakeLength,\n  bulges,\n  applePosition,\n  score\n}) => {\n  const distanceFromApple = _structures_vector__WEBPACK_IMPORTED_MODULE_4__.default.distance(currentSnakePositions[0], applePosition);\n  renderer.clear();\n  renderer.drawBulges(bulges);\n  renderer.drawSnake(currentSnakePositions, currentSnakeDirection, snakeLength);\n\n  if (distanceFromApple < 2) {\n    renderer.drawSnakeMouth(currentSnakePositions[0], currentSnakeDirection);\n  }\n\n  renderer.drawApple(applePosition);\n  ui.updateScore(score);\n};\n\ngameManager.onInit(updateGame);\ngameManager.onUpdate(updateGame);\ngameManager.onEnd(({\n  currentSnakePositions,\n  currentSnakeDirection,\n  snakeLength,\n  applePosition,\n  score,\n  grid\n}) => {\n  renderer.clear();\n  renderer.drawGrid(grid);\n  renderer.drawSnake(currentSnakePositions, currentSnakeDirection, snakeLength);\n  renderer.drawApple(applePosition);\n  const screenshot = renderer.takeScreenshot();\n  ui.goToReview(screenshot, score);\n});\n\n//# sourceURL=webpack://snake/./src/index.js?");

/***/ }),

/***/ "./src/renderers/canvas-renderer.js":
/*!******************************************!*\
  !*** ./src/renderers/canvas-renderer.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/direction */ \"./src/helpers/direction.js\");\n/* harmony import */ var _helpers_spritesheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/spritesheet */ \"./src/helpers/spritesheet.js\");\n/* harmony import */ var _structures_vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures/vector */ \"./src/structures/vector.js\");\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\n\n\nvar _canvas = /*#__PURE__*/new WeakMap();\n\nvar _context = /*#__PURE__*/new WeakMap();\n\nvar _width = /*#__PURE__*/new WeakMap();\n\nvar _height = /*#__PURE__*/new WeakMap();\n\nvar _cellSize = /*#__PURE__*/new WeakMap();\n\nvar _borderWidth = /*#__PURE__*/new WeakMap();\n\nvar _spriteSheet = /*#__PURE__*/new WeakMap();\n\nvar _drawSnakePart = /*#__PURE__*/new WeakSet();\n\nvar _loadSprites = /*#__PURE__*/new WeakSet();\n\nclass CanvasRenderer {\n  constructor(canvas, cellSize = 30) {\n    _loadSprites.add(this);\n\n    _drawSnakePart.add(this);\n\n    _canvas.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _context.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _width.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _height.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _cellSize.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _borderWidth.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _spriteSheet.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _canvas, canvas);\n\n    _classPrivateFieldSet(this, _context, canvas.getContext('2d'));\n\n    _classPrivateFieldSet(this, _height, canvas.height);\n\n    _classPrivateFieldSet(this, _width, canvas.width);\n\n    _classPrivateFieldSet(this, _cellSize, cellSize);\n\n    _classPrivateFieldSet(this, _borderWidth, 2);\n\n    _classPrivateFieldSet(this, _spriteSheet, new _helpers_spritesheet__WEBPACK_IMPORTED_MODULE_1__.default('./images/snake-spritesheet.png'));\n\n    _classPrivateMethodGet(this, _loadSprites, _loadSprites2).call(this);\n  }\n\n  clear() {\n    _classPrivateFieldGet(this, _context).clearRect(0, 0, _classPrivateFieldGet(this, _canvas).width, _classPrivateFieldGet(this, _canvas).height);\n  }\n\n  drawGrid(grid) {\n    // this.#canvas.height = this.#cellSize * grid.getColumnCount() + this.#borderWidth;\n    // this.#canvas.width = this.#cellSize * grid.getRowCount() + this.#borderWidth;\n    _classPrivateFieldGet(this, _context).beginPath();\n\n    let gridCoordinates = grid.getGridCoordinates();\n    gridCoordinates.forEach(coordinate => {\n      _classPrivateFieldGet(this, _context).beginPath();\n\n      _classPrivateFieldGet(this, _context).fillStyle = coordinate.y % 2 === coordinate.x % 2 ? \"#ffffff\" : \"#ced7dd \";\n\n      _classPrivateFieldGet(this, _context).rect(coordinate.x * _classPrivateFieldGet(this, _cellSize), coordinate.y * _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize));\n\n      _classPrivateFieldGet(this, _context).fill();\n\n      _classPrivateFieldGet(this, _context).closePath();\n    });\n\n    _classPrivateFieldGet(this, _context).closePath();\n  }\n\n  drawSnake(positions, direction) {\n    let bodyDirection, bodyDirectionString, bodySprite;\n\n    _classPrivateFieldGet(this, _context).beginPath();\n\n    for (var i = 1; i < positions.length - 1; i++) {\n      bodyDirection = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.solveBodyDirection)(positions[i - 1], positions[i], positions[i + 1]);\n      bodyDirectionString = `body-${bodyDirection.toString().toLowerCase()}`;\n      bodySprite = _classPrivateFieldGet(this, _spriteSheet).getSprite(bodyDirectionString);\n\n      if (bodySprite) {\n        _classPrivateMethodGet(this, _drawSnakePart, _drawSnakePart2).call(this, positions[i], bodySprite);\n      }\n    }\n\n    const tailDirection = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.solveDirection)(positions[positions.length - 1], positions[positions.length - 2]);\n    const tailDirectionString = `tail-${tailDirection.toString().toLowerCase()}`;\n\n    const tailSprite = _classPrivateFieldGet(this, _spriteSheet).getSprite(tailDirectionString);\n\n    _classPrivateMethodGet(this, _drawSnakePart, _drawSnakePart2).call(this, positions[positions.length - 1], tailSprite);\n\n    const headDirectionString = `head-${direction.toString().toLowerCase()}`;\n\n    const headSprite = _classPrivateFieldGet(this, _spriteSheet).getSprite(headDirectionString);\n\n    _classPrivateMethodGet(this, _drawSnakePart, _drawSnakePart2).call(this, positions[0], headSprite);\n  }\n\n  takeScreenshot() {\n    return _classPrivateFieldGet(this, _canvas).toDataURL('png');\n  }\n\n  drawApple(coordinate) {\n    let {\n      spriteSheet,\n      x,\n      y,\n      width,\n      height\n    } = _classPrivateFieldGet(this, _spriteSheet).getSprite('apple');\n\n    _classPrivateFieldGet(this, _context).rect(coordinate.x * _classPrivateFieldGet(this, _cellSize) + _classPrivateFieldGet(this, _borderWidth), coordinate.y * _classPrivateFieldGet(this, _cellSize) + _classPrivateFieldGet(this, _borderWidth), _classPrivateFieldGet(this, _cellSize) - _classPrivateFieldGet(this, _borderWidth), _classPrivateFieldGet(this, _cellSize) - _classPrivateFieldGet(this, _borderWidth));\n\n    _classPrivateFieldGet(this, _context).drawImage(spriteSheet, x, y, width, height, coordinate.x * _classPrivateFieldGet(this, _cellSize), coordinate.y * _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize));\n  }\n\n  drawSnakeMouth(headPosition, direction) {\n    let directionVector = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_0__.directionAsVector)(direction);\n    const halfSize = _classPrivateFieldGet(this, _cellSize) / 2;\n    const offset = _structures_vector__WEBPACK_IMPORTED_MODULE_2__.default.multiplyScalar(directionVector, halfSize / 1.5);\n\n    _classPrivateFieldGet(this, _context).beginPath();\n\n    _classPrivateFieldGet(this, _context).arc(headPosition.x * _classPrivateFieldGet(this, _cellSize) + halfSize + offset.x, headPosition.y * _classPrivateFieldGet(this, _cellSize) + halfSize + offset.y, _classPrivateFieldGet(this, _cellSize) / 3.5, 0, 2 * Math.PI, false);\n\n    _classPrivateFieldGet(this, _context).fillStyle = 'black';\n\n    _classPrivateFieldGet(this, _context).fill();\n\n    _classPrivateFieldGet(this, _context).closePath();\n  }\n\n  drawBulges(bulges) {\n    if (Array.isArray(bulges)) {\n      const halfSize = _classPrivateFieldGet(this, _cellSize) / 2;\n      bulges.forEach(({\n        position,\n        size\n      }) => {\n        _classPrivateFieldGet(this, _context).beginPath();\n\n        _classPrivateFieldGet(this, _context).arc(position.x * _classPrivateFieldGet(this, _cellSize) + halfSize, position.y * _classPrivateFieldGet(this, _cellSize) + halfSize, _classPrivateFieldGet(this, _cellSize) / 1.5 * size, 0, 2 * Math.PI, false);\n\n        _classPrivateFieldGet(this, _context).fillStyle = '#5b7bf9';\n\n        _classPrivateFieldGet(this, _context).fill();\n\n        _classPrivateFieldGet(this, _context).closePath();\n      });\n    }\n  }\n\n}\n\nfunction _drawSnakePart2(coordinate, {\n  spriteSheet,\n  x,\n  y,\n  width,\n  height\n}) {\n  _classPrivateFieldGet(this, _context).drawImage(spriteSheet, x, y, width, height, coordinate.x * _classPrivateFieldGet(this, _cellSize), coordinate.y * _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize), _classPrivateFieldGet(this, _cellSize));\n}\n\nfunction _loadSprites2() {\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('apple', 0, 0, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('head-up', 120, 40, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('head-right', 120, 0, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('head-down', 40, 80, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('head-left', 80, 80, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-up', 0, 80, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-right', 0, 40, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-leftdown', 40, 0, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-leftup', 40, 40, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-down', 0, 80, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-left', 0, 40, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-rightdown', 80, 0, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('body-rightup', 80, 40, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('tail-down', 120, 80, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('tail-left', 0, 120, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('tail-up', 80, 120, 40, 40);\n\n  _classPrivateFieldGet(this, _spriteSheet).addSprite('tail-right', 40, 120, 40, 40);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanvasRenderer);\n\n//# sourceURL=webpack://snake/./src/renderers/canvas-renderer.js?");

/***/ }),

/***/ "./src/snake.js":
/*!**********************!*\
  !*** ./src/snake.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/event-dispatcher */ \"./src/helpers/event-dispatcher.js\");\n/* harmony import */ var _helpers_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/direction */ \"./src/helpers/direction.js\");\n/* harmony import */ var _structures_linked_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./structures/linked-list */ \"./src/structures/linked-list.js\");\n/* harmony import */ var _structures_vector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./structures/vector.js */ \"./src/structures/vector.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\n\n\n\nvar _body = /*#__PURE__*/new WeakMap();\n\nvar _direction = /*#__PURE__*/new WeakMap();\n\nvar _nextDirection = /*#__PURE__*/new WeakMap();\n\nvar _eventDispatcher = /*#__PURE__*/new WeakMap();\n\nvar _events = /*#__PURE__*/new WeakMap();\n\nvar _initialPosition = /*#__PURE__*/new WeakMap();\n\nvar _initialDirection = /*#__PURE__*/new WeakMap();\n\nvar _initialLength = /*#__PURE__*/new WeakMap();\n\nvar _bulges = /*#__PURE__*/new WeakMap();\n\nclass Snake {\n  constructor(initialPosition, initialLength = 5, initialDirection = _helpers_direction__WEBPACK_IMPORTED_MODULE_1__.default.UP) {\n    _body.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _direction.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _nextDirection.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _eventDispatcher.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _events.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _initialPosition.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _initialDirection.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _initialLength.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _bulges.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _direction, initialDirection);\n\n    _classPrivateFieldSet(this, _nextDirection, initialDirection);\n\n    _classPrivateFieldSet(this, _initialPosition, initialPosition);\n\n    _classPrivateFieldSet(this, _initialDirection, initialDirection);\n\n    _classPrivateFieldSet(this, _initialLength, initialLength);\n\n    _classPrivateFieldSet(this, _eventDispatcher, new _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__.default());\n\n    _classPrivateFieldSet(this, _events, {\n      EAT: \"EAT\",\n      CHANGEDIRECTION: \"CHANGEDIRECTION\"\n    });\n\n    this.init();\n  }\n\n  init() {\n    const oppositeDirection = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_1__.getDirectionOpposite)(_classPrivateFieldGet(this, _initialDirection));\n    const directionVector = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_1__.directionAsVector)(oppositeDirection);\n\n    _classPrivateFieldSet(this, _body, new _structures_linked_list__WEBPACK_IMPORTED_MODULE_2__.default());\n\n    _classPrivateFieldGet(this, _body).push(new SnakeSegment(_classPrivateFieldGet(this, _initialPosition)));\n\n    let offset;\n\n    for (let i = 1; i < _classPrivateFieldGet(this, _initialLength); i++) {\n      offset = _structures_vector_js__WEBPACK_IMPORTED_MODULE_3__.default.multiplyScalar(directionVector, i);\n\n      _classPrivateFieldGet(this, _body).push(new SnakeSegment(_structures_vector_js__WEBPACK_IMPORTED_MODULE_3__.default.add(_classPrivateFieldGet(this, _initialPosition), offset)));\n    }\n\n    _classPrivateFieldSet(this, _direction, _classPrivateFieldGet(this, _initialDirection));\n\n    _classPrivateFieldSet(this, _bulges, []);\n  }\n\n  changeDirection(newDirection) {\n    const oppositeDirection = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_1__.getDirectionOpposite)(_classPrivateFieldGet(this, _direction));\n\n    if ((0,_helpers_direction__WEBPACK_IMPORTED_MODULE_1__.isDirection)(newDirection) && newDirection !== oppositeDirection) {\n      _classPrivateFieldSet(this, _nextDirection, newDirection);\n    }\n\n    if (_classPrivateFieldGet(this, _direction) != newDirection) {\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).CHANGEDIRECTION, newDirection);\n    }\n  }\n\n  move() {\n    let node = _classPrivateFieldGet(this, _body).head;\n\n    const directionVector = (0,_helpers_direction__WEBPACK_IMPORTED_MODULE_1__.directionAsVector)(_classPrivateFieldGet(this, _nextDirection));\n    let currentPosition = node.value().position;\n    let newPosition = _structures_vector_js__WEBPACK_IMPORTED_MODULE_3__.default.add(currentPosition, directionVector);\n\n    _classPrivateFieldGet(this, _body).unshift({\n      position: newPosition\n    }); // add new head\n\n\n    _classPrivateFieldSet(this, _direction, _classPrivateFieldGet(this, _nextDirection)); //progress any bulges\n\n\n    _classPrivateFieldGet(this, _bulges).filter(bulge => !bulge.isAvailable).forEach(bulge => {\n      bulge.step(_classPrivateFieldGet(this, _body).head, _classPrivateFieldGet(this, _body).length);\n      bulge.step(_classPrivateFieldGet(this, _body).head, _classPrivateFieldGet(this, _body).length);\n    });\n  }\n\n  eat() {\n    _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).EAT, _classPrivateFieldGet(this, _body).length); //if no available bulges then create one\n\n\n    const availableBulges = _classPrivateFieldGet(this, _bulges).filter(bulge => bulge.isAvailable);\n\n    if (availableBulges.length > 0) {\n      availableBulges[0].start(_classPrivateFieldGet(this, _body).head);\n    } else {\n      const bulge = new SnakeBulge();\n      bulge.start(_classPrivateFieldGet(this, _body).head);\n\n      _classPrivateFieldGet(this, _bulges).push(bulge);\n    }\n  }\n\n  pop() {\n    _classPrivateFieldGet(this, _body).pop(); // remove the tail\n\n  }\n\n  resetHandlers() {\n    _classPrivateFieldGet(this, _eventDispatcher).reset();\n  }\n\n  getBody() {\n    return _classPrivateFieldGet(this, _body);\n  }\n\n  getLength() {\n    return _classPrivateFieldGet(this, _body).length;\n  }\n\n  getDirection() {\n    return _classPrivateFieldGet(this, _direction);\n  }\n\n  getNextDirection() {\n    return _classPrivateFieldGet(this, _nextDirection);\n  }\n\n  getPositions() {\n    const positions = [];\n\n    let node = _classPrivateFieldGet(this, _body).head;\n\n    let i = 0;\n\n    while (i < _classPrivateFieldGet(this, _body).length) {\n      positions.push(node.value().position.get());\n      node = node.next();\n      i++;\n    }\n\n    return positions;\n  }\n\n  getBodyPositions() {\n    const positions = this.getPositions();\n    positions.shift();\n    return positions;\n  }\n\n  getBulges() {\n    return _classPrivateFieldGet(this, _bulges).filter(bulge => !bulge.isAvailable).map(bulge => {\n      return {\n        position: bulge.getPosition(),\n        size: bulge.size\n      };\n    });\n  }\n\n  getHeadPosition() {\n    return _classPrivateFieldGet(this, _body).head.value().position;\n  }\n\n  setHeadPosition(newPosition) {\n    _classPrivateFieldGet(this, _body).head.setValue(new SnakeSegment(newPosition));\n  }\n\n  hasOverlapped() {\n    const positions = this.getPositions();\n    positions.shift();\n    return positions.filter(position => _structures_vector_js__WEBPACK_IMPORTED_MODULE_3__.default.isEqual(position, _classPrivateFieldGet(this, _body).head.value().position)).length > 0;\n  }\n  /* Events */\n\n\n  onEat(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).EAT, handler);\n  }\n\n  removeOnEat(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).EAT, handler);\n  }\n\n  onChangeDirection(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).CHANGEDIRECTION, handler);\n  }\n\n  removeOnChangeDirection(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).CHANGEDIRECTION, handler);\n  }\n\n}\n\nclass SnakeSegment {\n  constructor(position) {\n    this.position = position;\n  }\n\n}\n\nclass SnakeBulge {\n  constructor() {\n    _defineProperty(this, \"initialNode\", void 0);\n\n    _defineProperty(this, \"currentNode\", void 0);\n\n    this.index = 0;\n    this.size = 0;\n    this.isAvailable = true;\n  }\n\n  start(node) {\n    this.index = 0;\n    this.isAvailable = false;\n    this.currentNode = node;\n  }\n\n  step(head, length) {\n    this.size = (length - this.index) / length / 2 + 0.5;\n    let node = head;\n\n    for (let i = 0; i < this.index; i++) {\n      if (node.next()) {\n        node = node.next();\n      }\n    }\n\n    this.currentNode = node;\n    this.index++;\n\n    if (this.index >= length) {\n      this.reset();\n    }\n  }\n\n  reset() {\n    this.isAvailable = true;\n    this.size = 0;\n    this.index = 0;\n  }\n\n  getPosition() {\n    return this.currentNode.value().position;\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Snake);\n\n//# sourceURL=webpack://snake/./src/snake.js?");

/***/ }),

/***/ "./src/structures/grid.js":
/*!********************************!*\
  !*** ./src/structures/grid.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./src/structures/vector.js\");\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\nvar _grid = /*#__PURE__*/new WeakMap();\n\nvar _numberOfColumns = /*#__PURE__*/new WeakMap();\n\nvar _numberOfRows = /*#__PURE__*/new WeakMap();\n\nclass Grid {\n  constructor(numberOfColumns = 0, numberOfRows = 0) {\n    _grid.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _numberOfColumns.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _numberOfRows.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _numberOfColumns, numberOfColumns);\n\n    _classPrivateFieldSet(this, _numberOfRows, numberOfRows);\n\n    _classPrivateFieldSet(this, _grid, new Array(_classPrivateFieldGet(this, _numberOfColumns) * _classPrivateFieldGet(this, _numberOfRows)));\n  }\n\n  getCenter() {\n    return new _vector__WEBPACK_IMPORTED_MODULE_0__.default(_classPrivateFieldGet(this, _numberOfColumns) / 2 - 1, _classPrivateFieldGet(this, _numberOfRows) / 2 - 1);\n  }\n\n  getColumnCount() {\n    return _classPrivateFieldGet(this, _numberOfColumns);\n  }\n\n  getRowCount() {\n    return _classPrivateFieldGet(this, _numberOfRows);\n  }\n\n  getGrid() {\n    return _classPrivateFieldGet(this, _grid);\n  }\n\n  getGridCoordinate(index) {\n    return new _vector__WEBPACK_IMPORTED_MODULE_0__.default(index % _classPrivateFieldGet(this, _numberOfColumns), Math.floor(index / _classPrivateFieldGet(this, _numberOfRows)));\n  }\n\n  getIndex(x, y) {\n    return y * _classPrivateFieldGet(this, _numberOfColumns) + x;\n  }\n\n  getGridCoordinates() {\n    return [...this.getGrid().keys()].map((element, index) => this.getGridCoordinate(index));\n  }\n\n  getRandomIndex(excludedIndices = []) {\n    const indices = [...this.getGrid().keys()].map((element, index) => index).filter(element => !excludedIndices.includes(element));\n    const randomNumber = Math.floor(Math.random() * indices.length);\n    return indices[randomNumber];\n  }\n\n  getRandomCoordinate(excludedCoordinates = []) {\n    const excludedIndices = excludedCoordinates.map(coordinate => this.getIndex(coordinate.x, coordinate.y));\n    const randomIndex = this.getRandomIndex(excludedIndices);\n    return this.getGridCoordinate(randomIndex);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Grid);\n\n//# sourceURL=webpack://snake/./src/structures/grid.js?");

/***/ }),

/***/ "./src/structures/linked-list.js":
/*!***************************************!*\
  !*** ./src/structures/linked-list.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nvar _clear = /*#__PURE__*/new WeakSet();\n\nclass SinglyLinkedList {\n  constructor() {\n    _clear.add(this);\n\n    _classPrivateMethodGet(this, _clear, _clear2).call(this);\n  }\n\n  push(value) {\n    const node = new SinglyLinkedListNode(value);\n\n    if (!this.head) {\n      this.head = node;\n      this.tail = this.head;\n    } else {\n      this.tail.setNext(node);\n      this.tail = node;\n    }\n\n    this.length += 1;\n    return this;\n  }\n\n  pop() {\n    if (this.length === 0) return undefined;\n    let currentNode = this.head;\n    let newTail = currentNode;\n\n    while (currentNode.next()) {\n      newTail = currentNode;\n      currentNode = currentNode.next();\n    }\n\n    this.tail = newTail;\n    this.tail.setNext(null);\n    this.length -= 1;\n    return currentNode;\n  } //shift - not necessary \n\n\n  unshift(value) {\n    const node = new SinglyLinkedListNode(value);\n\n    if (!this.head) {\n      this.head = node;\n      this.tail = this.head;\n    } else {\n      node.setNext(this.head);\n      this.head = node;\n    }\n\n    this.length += 1;\n    return this;\n  }\n\n}\n\nfunction _clear2() {\n  this.head = null;\n  this.tail = null;\n  this.length = 0;\n}\n\nvar _next = /*#__PURE__*/new WeakMap();\n\nvar _value = /*#__PURE__*/new WeakMap();\n\nclass SinglyLinkedListNode {\n  constructor(value) {\n    _next.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _value.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _next, null);\n\n    _classPrivateFieldSet(this, _value, value);\n  }\n\n  value() {\n    return _classPrivateFieldGet(this, _value);\n  }\n\n  next() {\n    return _classPrivateFieldGet(this, _next);\n  }\n\n  setNext(node) {\n    _classPrivateFieldSet(this, _next, node);\n  }\n\n  setValue(value) {\n    _classPrivateFieldSet(this, _value, value);\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SinglyLinkedList);\n\n//# sourceURL=webpack://snake/./src/structures/linked-list.js?");

/***/ }),

/***/ "./src/structures/vector.js":
/*!**********************************!*\
  !*** ./src/structures/vector.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Vector {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(vector) {\n    this.x += vector.x;\n    this.y += vector.y;\n  }\n\n  multiplyScalar(value) {\n    this.x *= value;\n    this.y *= value;\n    return this;\n  }\n\n  get() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  clone() {\n    return new Vector(this.x, this.y);\n  }\n\n  static add(vectorA, vectorB) {\n    return new Vector(vectorA.x + vectorB.x, vectorA.y + vectorB.y);\n  }\n\n  static distance(vectorA, vectorB) {\n    const a = vectorA.x - vectorB.x;\n    const b = vectorA.y - vectorB.y;\n    return Math.sqrt(a * a + b * b);\n  }\n\n  static isEqual(vectorA, vectorB) {\n    return vectorA.x === vectorB.x && vectorA.y === vectorB.y;\n  }\n\n  static multiplyScalar(vector, value) {\n    let clone = vector.clone();\n    clone.x *= value;\n    clone.y *= value;\n    return clone;\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Vector);\n\n//# sourceURL=webpack://snake/./src/structures/vector.js?");

/***/ }),

/***/ "./src/ui/ui.js":
/*!**********************!*\
  !*** ./src/ui/ui.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/event-dispatcher */ \"./src/helpers/event-dispatcher.js\");\n/* harmony import */ var _game_management_input_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../game-management/input-manager */ \"./src/game-management/input-manager.js\");\n/* harmony import */ var _game_management_highscore_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../game-management/highscore-manager */ \"./src/game-management/highscore-manager.js\");\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\n\n\n\n\nvar _inputManager = /*#__PURE__*/new WeakMap();\n\nvar _highScoreManager = /*#__PURE__*/new WeakMap();\n\nvar _eventDispatcher = /*#__PURE__*/new WeakMap();\n\nvar _events = /*#__PURE__*/new WeakMap();\n\nvar _startScreen = /*#__PURE__*/new WeakMap();\n\nvar _gameScreen = /*#__PURE__*/new WeakMap();\n\nvar _highScoreScreen = /*#__PURE__*/new WeakMap();\n\nvar _reviewScreen = /*#__PURE__*/new WeakMap();\n\nvar _promptElement = /*#__PURE__*/new WeakMap();\n\nvar _promptElementText = /*#__PURE__*/new WeakMap();\n\nvar _scoreElement = /*#__PURE__*/new WeakMap();\n\nvar _showStartScreen = /*#__PURE__*/new WeakSet();\n\nvar _startGame = /*#__PURE__*/new WeakSet();\n\nvar _showGameScreen = /*#__PURE__*/new WeakSet();\n\nvar _showHighScoreScreen = /*#__PURE__*/new WeakSet();\n\nvar _showReviewScreen = /*#__PURE__*/new WeakSet();\n\nvar _show = /*#__PURE__*/new WeakSet();\n\nvar _hide = /*#__PURE__*/new WeakSet();\n\nvar _prompt = /*#__PURE__*/new WeakSet();\n\nvar _clearPrompt = /*#__PURE__*/new WeakSet();\n\nclass UI {\n  constructor(startScreen, gameScreen, highScoreScreen, reviewScreen) {\n    _clearPrompt.add(this);\n\n    _prompt.add(this);\n\n    _hide.add(this);\n\n    _show.add(this);\n\n    _showReviewScreen.add(this);\n\n    _showHighScoreScreen.add(this);\n\n    _showGameScreen.add(this);\n\n    _startGame.add(this);\n\n    _showStartScreen.add(this);\n\n    _inputManager.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _highScoreManager.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _eventDispatcher.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _events.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _startScreen.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _gameScreen.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _highScoreScreen.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _reviewScreen.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _promptElement.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _promptElementText.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _scoreElement.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    _classPrivateFieldSet(this, _inputManager, new _game_management_input_manager__WEBPACK_IMPORTED_MODULE_1__.default());\n\n    _classPrivateFieldSet(this, _eventDispatcher, new _helpers_event_dispatcher__WEBPACK_IMPORTED_MODULE_0__.default());\n\n    _classPrivateFieldSet(this, _highScoreManager, new _game_management_highscore_manager__WEBPACK_IMPORTED_MODULE_2__.default('jm-snake'));\n\n    _classPrivateFieldSet(this, _events, {\n      INIT: \"INIT\",\n      MAINMENU: \"MAINMENU\",\n      STARTGAME: \"STARTGAME\",\n      SUBMITSCORE: \"SUBMITSCORE\",\n      SHOWHIGHSCORES: \"SHOWHIGHSCORES\"\n    });\n\n    Object.freeze(_classPrivateFieldGet(this, _events));\n\n    _classPrivateFieldSet(this, _startScreen, startScreen);\n\n    _classPrivateFieldSet(this, _gameScreen, gameScreen);\n\n    _classPrivateFieldSet(this, _highScoreScreen, highScoreScreen);\n\n    _classPrivateFieldSet(this, _reviewScreen, reviewScreen);\n\n    _classPrivateFieldSet(this, _scoreElement, document.body.querySelectorAll('.score'));\n\n    _classPrivateFieldSet(this, _promptElement, document.getElementById('prompt'));\n\n    _classPrivateFieldSet(this, _promptElementText, document.getElementById('prompt-text'));\n\n    _classPrivateMethodGet(this, _clearPrompt, _clearPrompt2).call(this);\n\n    _classPrivateMethodGet(this, _showStartScreen, _showStartScreen2).call(this);\n  }\n  /* Public Methods */\n\n\n  updateScore(score) {\n    for (var i = 0; i < _classPrivateFieldGet(this, _scoreElement).length; i++) {\n      _classPrivateFieldGet(this, _scoreElement)[i].innerHTML = score;\n    }\n  }\n\n  goToReview(image, score) {\n    _classPrivateMethodGet(this, _showReviewScreen, _showReviewScreen2).call(this, score);\n\n    _classPrivateFieldGet(this, _reviewScreen).querySelector('img').src = image;\n    this.updateScore(score);\n  }\n\n  renderHighScores(highScores) {\n    const highscoresElement = _classPrivateFieldGet(this, _highScoreScreen).querySelector('#high-scores');\n\n    const highscoresMessage = _classPrivateFieldGet(this, _highScoreScreen).querySelector('#high-scores-message');\n\n    _classPrivateMethodGet(this, _show, _show2).call(this, highscoresElement);\n\n    _classPrivateMethodGet(this, _hide, _hide2).call(this, highscoresMessage);\n\n    if (highScores.length === 0) {\n      _classPrivateMethodGet(this, _show, _show2).call(this, highscoresMessage);\n    }\n\n    let highScoresHtml = [`<li><h3>name</h3><h3>#<span class=\"apple-icon\"></span></h3></li>`];\n\n    for (let i = 0; i < 10; i++) {\n      if (i < highScores.length) {\n        highScoresHtml.push(`<li><div>${highScores[i].name}</div><div>${highScores[i].value}</div></li>`);\n      } else {\n        highScoresHtml.push(`<li><div></div><div></div></li>`);\n      }\n    }\n\n    highscoresElement.innerHTML = highScoresHtml.join(\"\");\n  }\n  /* Events */\n\n\n  onInitGame(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).INIT, handler);\n  }\n\n  removeonInitGame(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).INIT, handler);\n  }\n\n  onStartGame(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).STARTGAME, handler);\n  }\n\n  removeOnStartGame(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).STARTGAME, handler);\n  }\n\n  onSubmitHighScores(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).SUBMITSCORE, handler);\n  }\n\n  removeOnSubmitHighScores(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).SUBMITSCORE, handler);\n  }\n\n  onShowHighScores(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).SHOWHIGHSCORES, handler);\n  }\n\n  removeOnShowHighScores(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).SHOWHIGHSCORES, handler);\n  }\n\n  onMainMenu(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).registerHandler(_classPrivateFieldGet(this, _events).MAINMENU, handler);\n  }\n\n  removeOnMainMenu(handler) {\n    _classPrivateFieldGet(this, _eventDispatcher).deregisterHandler(_classPrivateFieldGet(this, _events).MAINMENU, handler);\n  }\n  /* Private Methods */\n\n\n}\n\nfunction _showStartScreen2() {\n  _classPrivateMethodGet(this, _show, _show2).call(this, _classPrivateFieldGet(this, _startScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _gameScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _highScoreScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _reviewScreen));\n\n  const highScoresButton = _classPrivateFieldGet(this, _startScreen).querySelector('#high-scores-button');\n\n  const startButton = _classPrivateFieldGet(this, _startScreen).querySelector('#start-button');\n\n  const onStartGameAction = () => {\n    startButton.removeEventListener('click', onStartGameAction);\n\n    _classPrivateMethodGet(this, _startGame, _startGame2).call(this);\n  };\n\n  const onHighScoresAction = () => {\n    highScoresButton.removeEventListener('click', onHighScoresAction);\n\n    _classPrivateMethodGet(this, _showHighScoreScreen, _showHighScoreScreen2).call(this);\n\n    _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).SHOWHIGHSCORES);\n  };\n\n  startButton.addEventListener('click', onStartGameAction);\n  highScoresButton.addEventListener('click', onHighScoresAction);\n\n  _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).MAINMENU);\n}\n\nfunction _startGame2() {\n  _classPrivateMethodGet(this, _showGameScreen, _showGameScreen2).call(this);\n\n  _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).INIT);\n\n  _classPrivateMethodGet(this, _prompt, _prompt2).call(this, 'Press any key to begin');\n\n  const onBeingGameAction = () => {\n    _classPrivateFieldGet(this, _inputManager).removeOnAnyKey(onBeingGameAction);\n\n    _classPrivateMethodGet(this, _clearPrompt, _clearPrompt2).call(this);\n\n    _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).STARTGAME);\n  };\n\n  _classPrivateFieldGet(this, _inputManager).onAnyKey(onBeingGameAction);\n}\n\nfunction _showGameScreen2() {\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _startScreen));\n\n  _classPrivateMethodGet(this, _show, _show2).call(this, _classPrivateFieldGet(this, _gameScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _highScoreScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _reviewScreen));\n}\n\nfunction _showHighScoreScreen2() {\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _startScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _gameScreen));\n\n  _classPrivateMethodGet(this, _show, _show2).call(this, _classPrivateFieldGet(this, _highScoreScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _reviewScreen));\n\n  this.renderHighScores(_classPrivateFieldGet(this, _highScoreManager).getTopTen());\n\n  const backToMenuButton = _classPrivateFieldGet(this, _highScoreScreen).querySelector('#back-button');\n\n  const backToMenuAction = () => {\n    backToMenuButton.removeEventListener('click', backToMenuAction);\n\n    _classPrivateMethodGet(this, _showStartScreen, _showStartScreen2).call(this);\n  };\n\n  backToMenuButton.addEventListener('click', backToMenuAction);\n}\n\nfunction _showReviewScreen2(score) {\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _startScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _gameScreen));\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _highScoreScreen));\n\n  _classPrivateMethodGet(this, _show, _show2).call(this, _classPrivateFieldGet(this, _reviewScreen));\n\n  const playAgainButton = _classPrivateFieldGet(this, _reviewScreen).querySelector('#play-again-button');\n\n  const backToMenuButton = _classPrivateFieldGet(this, _reviewScreen).querySelector('#menu-button');\n\n  const scoreButton = _classPrivateFieldGet(this, _reviewScreen).querySelector('#submit-button');\n\n  const nameInput = _classPrivateFieldGet(this, _reviewScreen).querySelector('#name');\n\n  const submitScoreAction = e => {\n    e.preventDefault();\n\n    if (typeof nameInput.value === 'string' && nameInput.value.length > 0) {\n      scoreButton.removeEventListener('click', submitScoreAction);\n\n      _classPrivateFieldGet(this, _highScoreManager).addHighScore(nameInput.value, score);\n\n      _classPrivateMethodGet(this, _showHighScoreScreen, _showHighScoreScreen2).call(this);\n\n      _classPrivateFieldGet(this, _eventDispatcher).dispatch(_classPrivateFieldGet(this, _events).SHOWHIGHSCORES);\n    } else {\n      alert('Please enter a name');\n    }\n  };\n\n  const playAgainAction = () => {\n    playAgainButton.removeEventListener('click', playAgainAction);\n\n    _classPrivateMethodGet(this, _startGame, _startGame2).call(this);\n  };\n\n  const backToMenuAction = () => {\n    backToMenuButton.removeEventListener('click', backToMenuAction);\n\n    _classPrivateMethodGet(this, _showStartScreen, _showStartScreen2).call(this);\n  };\n\n  playAgainButton.addEventListener('click', playAgainAction);\n  backToMenuButton.addEventListener('click', backToMenuAction);\n  scoreButton.addEventListener('click', submitScoreAction);\n}\n\nfunction _show2(element) {\n  element.classList.remove('hidden');\n}\n\nfunction _hide2(element) {\n  element.classList.add('hidden');\n}\n\nfunction _prompt2(text) {\n  _classPrivateMethodGet(this, _show, _show2).call(this, _classPrivateFieldGet(this, _promptElement));\n\n  _classPrivateFieldGet(this, _promptElementText).innerHTML = text;\n}\n\nfunction _clearPrompt2() {\n  _classPrivateFieldGet(this, _promptElementText).innerHTML = '';\n\n  _classPrivateMethodGet(this, _hide, _hide2).call(this, _classPrivateFieldGet(this, _promptElement));\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UI);\n\n//# sourceURL=webpack://snake/./src/ui/ui.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;